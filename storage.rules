rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidImageSize() {
      // Max 10MB for images
      return request.resource.size < 10 * 1024 * 1024;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*');
    }

    // User profile pictures
    match /users/{userId}/profile/{imageId} {
      allow read: if true; // Public read
      allow write: if isOwner(userId) && isValidImage() && isValidImageSize();
      allow delete: if isOwner(userId);
    }

    // Meal images (for AI analysis)
    match /users/{userId}/meals/{mealId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidImage() && isValidImageSize();
      allow delete: if isOwner(userId);
    }

    // Group images
    match /groups/{groupId}/images/{imageId} {
      allow read: if true; // Public read for group images
      allow write: if isAuthenticated() && isValidImage() && isValidImageSize();
      allow delete: if isAuthenticated(); // Creator check should be in app logic
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
