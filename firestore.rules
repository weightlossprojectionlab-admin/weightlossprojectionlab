rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // HELPER FUNCTIONS
    // ============================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isSuperAdmin() {
      return isAuthenticated() &&
             (request.auth.token.email == 'perriceconsulting@gmail.com' ||
              request.auth.token.email == 'weigthlossprojectionlab@gmail.com');
    }

    function isAdmin() {
      return isAuthenticated() &&
             (isSuperAdmin() ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    function isModerator() {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator' ||
              isAdmin());
    }

    // ============================================
    // USERS COLLECTION
    // ============================================

    match /users/{userId} {
      // Read: Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || isAdmin();

      // Create: Users can create their own profile
      allow create: if isOwner(userId);

      // Update: Users can update their own profile (except role field)
      allow update: if isOwner(userId) &&
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));

      // Admins can update any user
      allow update: if isAdmin();

      // Delete: Only admins
      allow delete: if isAdmin();

      // --- Legacy subcollections (from original rules) ---

      // Weight logs
      match /weightLogs/{logId} {
        allow read, write: if isOwner(userId);
      }

      // Meal logs
      match /mealLogs/{logId} {
        allow read, write: if isOwner(userId);
      }

      // Step logs
      match /stepLogs/{logId} {
        allow read, write: if isOwner(userId);
      }

      // Biometric credentials
      match /biometricCredentials/{credentialId} {
        allow read, write: if isOwner(userId);
      }

      // --- Phase 3 subcollections ---

      // User missions (active)
      match /missions_active/{missionId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }

      // User missions (history)
      match /missions_history/{missionId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        // No updates or deletes on history
      }

      // User coaching data
      match /coaching/{docId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }

      // User nudges queue
      match /nudges_queue/{nudgeId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }

      // User perks (redeemed)
      match /perks_redeemed/{perkId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        // No updates or deletes
      }
    }

    // ============================================
    // GROUPS COLLECTION
    // ============================================

    match /groups/{groupId} {
      // Read: Anyone can read public groups, members can read private groups
      allow read: if resource.data.visibility == 'public' ||
                     (isAuthenticated() && request.auth.uid in resource.data.members);

      // Create: Any authenticated user can create a group
      allow create: if isAuthenticated() &&
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.members.hasAll([request.auth.uid]);

      // Update: Group creator or admins can update
      allow update: if isAuthenticated() &&
                      (resource.data.createdBy == request.auth.uid || isAdmin());

      // Delete: Only creator or admins
      allow delete: if isAuthenticated() &&
                      (resource.data.createdBy == request.auth.uid || isAdmin());

      // Group missions subcollection
      match /missions/{missionId} {
        allow read: if get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow write: if get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid || isAdmin();
      }

      // Group members progress
      match /members_progress/{userId} {
        allow read: if get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow write: if isOwner(userId);
      }
    }

    // ============================================
    // MISSIONS & CHALLENGES
    // ============================================

    // Missions catalog (global missions available to users)
    match /missions_catalog/{missionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Seasonal challenges
    match /seasonal_challenges/{challengeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ============================================
    // PERKS (Sponsor Perks)
    // ============================================

    match /perks/{perkId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ============================================
    // TRUST & SAFETY
    // ============================================

    match /dispute_cases/{caseId} {
      // Read: Case participants or moderators/admins
      allow read: if isAuthenticated() &&
                     (request.auth.uid in resource.data.involvedUserIds ||
                      isModerator());

      // Create: Any authenticated user can create a case
      allow create: if isAuthenticated() &&
                      request.resource.data.reporterId == request.auth.uid;

      // Update: Only moderators/admins
      allow update: if isModerator();

      // Delete: Only admins
      allow delete: if isAdmin();

      // Case actions (audit trail)
      match /actions/{actionId} {
        allow read: if isModerator();
        allow create: if isModerator();
        // No updates or deletes on audit trail
      }
    }

    // ============================================
    // SYSTEM COLLECTIONS
    // ============================================

    // Global biometric fingerprints (server-side only)
    match /biometricFingerprints/{fingerprintId} {
      allow read, write: if false;
    }

    // AI decision logs (admin read-only)
    match /ai_decision_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // Analytics events
    match /analytics_events/{eventId} {
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
    }

    // Admin audit logs (append-only, admin read-only)
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes allowed
    }

    // ============================================
    // RECIPE & COOKING FEATURES
    // ============================================

    // Cooking sessions
    match /cooking-sessions/{sessionId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Recipe queue
    match /recipe-queue/{queueId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Recipes collection (media metadata)
    match /recipes/{recipeId} {
      // Public read access for all users
      allow read: if true;
      // Admin-only write access for uploading media
      allow write: if isAdmin();
    }

    // ============================================
    // GAMIFICATION & MISSIONS
    // ============================================

    // User missions
    match /user_missions/{missionId} {
      allow read: if isAuthenticated() &&
                     (!('userId' in resource.data) || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
                       (!('userId' in resource.data) || resource.data.userId == request.auth.uid) &&
                       (!('userId' in request.resource.data) || request.resource.data.userId == request.auth.uid);
    }

    // Gamification profiles
    match /gamification/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow write: if isAuthenticated() && userId == request.auth.uid;
    }

    // XP transactions (read-only for users)
    match /xp_transactions/{transactionId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
    }

    // ============================================
    // NOTIFICATIONS
    // ============================================

    // Notification tokens
    match /notification_tokens/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow write: if isAuthenticated() && userId == request.auth.uid;
    }

    // Scheduled nudges (notifications)
    match /scheduled_nudges/{nudgeId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
    }

    // ============================================
    // AI COACH CHAT
    // ============================================

    // Chat messages
    match /chat_messages/{messageId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // No updates or deletes - chat history is immutable
    }

    // ============================================
    // READINESS ANALYZER (Phase 3 Agent)
    // ============================================

    // Readiness analysis results
    match /readiness_analysis/{analysisId} {
      // Users can read their own analyses
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      // Admins can read all analyses
      allow read: if isAdmin();
      // Only server-side writes (through API with admin SDK)
      allow write: if false;
    }

    // ============================================
    // INACTIVE DETECTION (Phase 3 Agent)
    // ============================================

    // Re-engagement campaigns
    match /reengagement_campaigns/{campaignId} {
      // Users can read their own campaigns
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      // Admins can read all campaigns
      allow read: if isAdmin();
      // Only server-side writes (through API with admin SDK)
      allow write: if false;
    }

    // ============================================
    // MEAL TRACKING
    // ============================================

    // Meals collection
    match /meals/{mealId} {
      // Allow queries and individual document reads for authenticated users querying their own data
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Weight entries
    match /weight_entries/{entryId} {
      // Allow queries and individual document reads for authenticated users querying their own data
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Weekly missions
    match /weekly_missions/{missionId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Cooking sessions (if not already covered above)
    match /cooking_sessions/{sessionId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Recipe queue (if not already covered above)
    match /recipe_queue/{queueId} {
      allow read: if isAuthenticated() &&
                     (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ============================================
    // DEFAULT DENY
    // ============================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}